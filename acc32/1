    .data

buf:                .byte   '________________________________' ; Буфер для хранения строки (длина 32 байта)
buf_start:          .word   0x0             ; Начальный адрес буфера
i:                  .word   0x0             ; Счетчик символов в буфере (индекс)
ptr:                .word   0x0             ; Указатель на текущую позицию в буфере
intput_addr:        .word   0x80            ; Адрес входного потока данных
output_addr:        .word   0x84            ; Адрес выходного потока данных
buf_size:           .word   0x20            ; Максимальный размер буфера по заданию 0x20 - это (32 байта)
eof:                .word   0xA             ; Символ конца строки (новая строка '\n')
cap_case_shift:     .word   32              ; Смещение регистра для изменения регистра букв (разница между 'a' и 'A')
space:              .word   0x20            ; ASCII-код символа ' '
const_a:            .word   'a'             ; ASCII-код символа 'a'
const_z:            .word   'z'             ; ASCII-код символа 'z'
const_A:            .word   'A'             ; ASCII-код символа 'A'
const_Z:            .word   'Z'             ; ASCII-код символа 'Z'

const_1:            .word   1               ; Константа 1
const_0:            .word   0               ; Константа 0
const_FF:           .word   0xFF            ; Маска для выделения младшего байта
mask:               .word   0xFFFFFF00      ; Маска для очистки младшего байта
overflow_value:     .word   0xCCCC_CCCC     ; Значение для ошибки переполнения

cap_flag:           .word   1               ; Флаг, указывающий, нужно ли писать слово с заглавной буквы
tmp:                .word   0x0             ; Временная переменная для хранения символа

    .text

_start:

; Устанавливаем начальное значение ptr = buf_start + 1 (указатель на первую ячейку после заголовка-размера)
    load_addr       buf_start
    add             const_1
    store_addr      ptr

; Устанавливаем начальное значение i = 0
    load_addr       const_0                     ; 0 -> i (обнуляем счетчик символов)
    store_addr      i

read_cycle:
; Проверяем, не достигли ли мы предельного размера буфера (buf_size)
    sub             buf_size                    ; Если i == buf_size, то вызываем обработчик переполнения
    beqz            overflow

; Читаем следующий символ из входного буфера
    load_ind        intput_addr                 ; Загружаем следующий символ из входного потока
    and             const_FF                    ; Очищаем все старшие биты (старшие 3 байта) (оставляем только младший байт) - проверка, что оставляем только один символ закодированный в ASCII
    store_addr      tmp                         ; tmp = считанный символ

; Если считанный символ - это конец строки (EOF), переходим к сохранению длины строки
    load_addr       eof                         ; Проверяем, достигли ли конца строки
    sub             tmp
    beqz            store_str_len

; Если считанный символ - пробел, устанавливаем cap_flag и пропускаем дальнейшие проверки
    load_addr       space                       ; Проверяем, является ли символ пробелом
    sub             tmp
    beqz            set_cap_flag                ; Если да, устанавливаем cap_flag

; Проверяем, установлен ли cap_flag (флаг заглавной буквы)
    load_addr       cap_flag                    ; Проверяем флаг заглавной буквы
    beqz            to_lowercase                ; Если не установлен, переводим символ в нижний регистр
                                                ; Иначе переводим в верхний регистр

to_uppercase:                                    
    load_addr       tmp                         ; Проверяем, находится ли символ в диапазоне 'a' - 'z'
    sub             const_a                     
    ble             remove_cap_flag             ; Если символ меньше 'a', не меняем его

    load_addr       const_z                     
    sub             tmp
    ble             remove_cap_flag             ; Если символ больше 'z', не меняем его

    load_addr       tmp                         ; Преобразуем в верхний регистр
    sub             cap_case_shift
    store_addr      tmp

remove_cap_flag:
; Сбрасываем cap_flag после преобразования первой буквы слова
    load_addr       const_0                     ; Сбрасываем флаг заглавной буквы
    store_addr      cap_flag
    
    jmp             store_tmp                   ; Переходим к сохранению символа

to_lowercase:
    load_addr       tmp                         ; Проверяем, находится ли символ в диапазоне 'A' - 'Z'
    sub             const_A                     
    ble             store_tmp                   ; Если символ меньше 'A', не меняем его

    load_addr       const_Z                     
    sub             tmp
    ble             store_tmp                   ; Если символ больше 'Z', не меняем его

    load_addr       tmp                         ; Преобразуем в нижний регистр
    add             cap_case_shift              ; Делаем букву строчной (перенос из верхнего регистра)
    store_addr      tmp

    jmp             store_tmp                   ; Переходим к сохранению символа

set_cap_flag:
; Устанавливаем cap_flag (следующая буква должна быть заглавной)
    load_addr       const_1                     ; Устанавливаем флаг заглавной буквы
    store_addr      cap_flag

store_tmp:
; Сохраняем символ в буфер
    load_ind        ptr                         ; Сохраняем символ в буфер
    and             mask                        ; Очищаем младший байт. обнуляет младший байт, оставляя старшие биты. очистить младший байт перед записью нового символа
    or              tmp                         ; Записываем символ. Поскольку младший байт был обнулен на предыдущем шаге, операция OR "вставляет" символ из tmp в младший байт, не затрагивая старшие биты.

    store_ind       ptr

; Увеличиваем указатель буфера ptr++
    load_addr       ptr                         ; Увеличиваем указатель
    add             const_1
    store_addr      ptr

; Увеличиваем счетчик символов i++
    load_addr       i                           ; Увеличиваем счетчик i
    add             const_1
    store_addr      i

; Продолжаем цикл чтения
    jmp             read_cycle

store_str_len:
; Сохраняем длину строки в buf_start
    load_ind        buf_start                   ; Записываем длину строки в буфер
    and             mask
    or              i
    store_ind       buf_start

; Устанавливаем указатель ptr = buf_start + 1
    load_addr       buf_start
    add             const_1
    store_addr      ptr

; Загружаем i в аккумулятор (используется для проверки конца строки)
    load_addr       i

print_cycle:
    beqz            end                         ; Если i == 0, завершаем вывод

; Выводим символ в output_addr
    load_ind        ptr                         ; Читаем следующий символ из буфера
    and             const_FF                    ; Очищаем старшие биты
    store_ind       output_addr                 ; Выводим символ

; Увеличиваем указатель ptr++
    load_addr       ptr                         ; Увеличиваем указатель
    add             const_1
    store_addr      ptr

; Уменьшаем счетчик i--
    load_addr       i                           ; Уменьшаем счетчик i
    sub             const_1                    
    store_addr      i

; Продолжаем цикл вывода
    jmp             print_cycle

end:
; Завершаем выполнение
    halt

overflow:
; В случае переполнения записываем в выходной буфер специальное значение
    load_addr       overflow_value              ; Записываем код ошибки в выходной поток
    store_ind       output_addr
    halt
